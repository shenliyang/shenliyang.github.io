{"meta":{"title":"大白话说前端 - 多看源码多读书，勤于思考善领悟","subtitle":"从未如此简单有趣","description":"Snippet主题，也许是一款你寻找已久的Hexo主题。","author":"shenliyang","url":"http://www.91h5.cc","root":"/"},"pages":[{"title":"categories","date":"2019-08-16T09:48:58.000Z","updated":"2021-08-15T09:30:32.359Z","comments":true,"path":"categories/index.html","permalink":"http://www.91h5.cc/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-16T09:43:43.000Z","updated":"2021-08-15T09:30:32.359Z","comments":true,"path":"tags/index.html","permalink":"http://www.91h5.cc/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"史上最全的Webstorm快捷键及技巧","slug":"史上最全的Webstorm快捷键大全","date":"2017-09-21T02:44:48.000Z","updated":"2021-08-15T09:30:32.359Z","comments":true,"path":"archives/47814.html","link":"","permalink":"http://www.91h5.cc/archives/47814.html","excerpt":"","text":"Webstorm是一款前端开发神器，此文介绍webstorm的快捷键和技巧分享。 所谓工欲善其事，必先利其器嘛，想着如果要提高开发效率，那掌握一些常用的快捷键应该是少不了的，所以把webstorm快捷键及技巧分享给大家。持续更新中 webstorm官方下载地址：http://www.jetbrains.com/webstorm/ 快捷键大全编辑类 【Ctrl + Space 】基本代码完成 （任何类、 方法或变量名称）【Alt + Enter】 展示意图动作和快速修复【Ctrl + P】显示调用方法内参数信息【Ctrl + Q】 快速记录查找【Ctrl + mouse】放在代码上面-显示简短的代码信息【Ctrl + F1】在插入符号显示错误或警告的说明【Alt + Insert】生成代码【Ctrl + Alt + T】快速生成（if..else, try..catch, for, etc.）等【Ctrl + J】插入Live模板【Ctrl + / 】行注释与取消行注释【Ctrl + Shift + / 】块注释与取消块注释【Ctrl + W 】增加选择中代码块【Ctrl + Shift + W 】减少当前所选内容代码块【Alt + Q 】上下文信息【Ctrl + Alt + L 】格式化代码【Ctrl + Alt + I 】自动缩进的行数【Tab / Shift + Tab 】缩进/取消缩进选定的行【Ctrl + X , Shift + Delete】 剪切到剪贴板的当前行或者所选代码块【Ctrl + C】Ctrl + 插入复制当前行或者所选代码块到剪贴板【Ctrl + V】Shift + 从剪贴板插入粘贴【Ctrl + Shift + V 】最近缓冲区粘贴【Ctrl + D】复制当前行或者所选代码块【Ctrl + Y】删除行【Ctrl + Shift + J 】加入行【Ctrl + enter 】拆分行【shift + Enter 】 重新开始一行（无论光标在哪个位置）【Ctrl + Shift + U 】切换选中词或所选代码块的大小写【Ctrl + Shift +]】选中直到代码块的开始【Ctrl + Shift +[】选择直到代码块的结束【Ctrl + Delete】 删除光标右侧的词【Ctrl + backspace】 删除光标左侧的词【Ctrl + NumPad+】展开代码块【Ctrl + NumPad-】折叠代码块【Ctrl + Shift + NumPad+】展开所有代码块【Ctrl + Shift + NumPad-】折叠所有代码块【Ctrl + F4 】关闭当前标签页 同时编辑多行 【Alt + Click】 同时选中多行，同时编辑【Shift + Ctrl + Alt + J】选择所有当前选中的词【Alt + J】选择下一个相同的词【Alt + Shift + J】取消所有选中的词【Esc】取消选择所有选中的词或插入符号 运行类 【Alt + Shift + F10/F9】 选择配置和运行/调试【Shift + F10/F9】 运行/调试【Ctrl + Shift + F10/F9】 运行/调试上下文配置从编辑器【Alt + Shift + R】 重新运行测试 调试类 【F8】不进入函数【F7】 单步执行【Shift + F7】 只能单步执行【Shift + F8】跳出【Alt + F9】 运行到光标处【Alt + F8】 计算表达式的值【F9】 重新开始【Ctrl + f8】 切换断点【Ctrl + Shift + F8】 查看断点 导航类 【Ctrl + N】跳转到指定类【Ctrl + Shift + N】 通过文件名快速查找工程内的文件【Ctrl + Alt + Shift + N】 通过一个字符查找函数位置【Alt + Right】进入下一个编辑器选项【Alt + Left】进入上一个编辑器选项【f12】 进入上一个工具窗口【esc】 从工具窗口进入编辑器【Shift + Esc】 隐藏活动窗口【Ctrl + Shift + F4】 关闭活动运行/消息/查找/选项卡【Ctrl + G】 跳转到指定行【Ctrl + E】 弹出最近打开的文件列表【Ctrl + Alt + Left】导航前进【Ctrl + Alt + Right】导航回退【Ctrl + Shift +Backspace】定位到最近编辑窗口【Alt + F1】查找当前选中的代码或文件在其他界面模块的位置【Ctrl + B/Click】跳转到定义处【Ctrl + 单击】转到声明【Ctrl + Alt + B 】跳转方法实现处【Ctrl + Shift + I】打开定义快速查找【Ctrl + Shift + B 】跳转方法定义处【Ctrl + U 】转到超级方法/超级类【Alt + Up/Down】在方法间快速移动定位【Ctrl +]/[】移动到代码块结束/启动【Ctrl + f12】弹出文件结构【Ctrl + H 】类型层次结构【Ctrl + Alt + H】 调用层次结构【F2/Shift + F2】跳转到后一个/前一个错误，在出错的语句之间进行跳转。【F4/Ctrl + Enter】 编辑源代码/查看源代码【Alt + home】 显示导航栏【F11】切换标记【Ctrl + F11】 采用记忆切换标记【Ctrl + #[0-9]】跳转到带编号的标记【Shift + F11 显示书签 VCS版本控制 【Alt + 反引号 (‘)】 ‘VCS’ 快速弹出【Ctrl + K】提交项目到VCS【Ctrl + T】 从VCS更新项目【Alt + Shift + C】查看最近的更改 搜索/替换 【Ctrl + F】 查找【F3】 查找下一个【Shift + F3】 查找上一个【Ctrl + R】替换【Ctrl + Shift + F】 在路径中找到【Ctrl + Shift + R】 替换路径中的查找 搜索类 【Alt + f7】查找实例【Ctrl + f7】在文件中查找实例【Ctrl + Shift + f7】 在文件中高亮实例【Ctrl + Alt + F7】显示实例 重构类 【F5】拷贝当前文件【F6】移动当前文件【Alt + delete】 安全删除【Shift + F6】 重命名【Ctrl + Alt + N】嵌入变量【Ctrl + Alt + M】提取函数【Ctrl + Alt + V】引入变量【Ctrl + Alt + C】引入常量【Ctrl + Alt + P】引入参数【Ctrl + F6】改变方法名 常规类 【Ctrl + Shift +a】 查找当前【双击shift】查找所有的（包括文件、命令等）【Alt + #[0-9]】 打开相应的工具窗口【Ctrl + Shift + f12】 键切换最大化编辑器【Alt + Shift + F】 将添加到收藏夹【Alt + Shift + I】 检查当前文件与当前配置文件【Ctrl + 反引号 (‘)】快速切换当前计划【Ctrl + Alt + S】 打开设置【Ctrl + Tab】 切换选项卡和工具窗口 常用插件推荐 Key Promoter【学习快捷键神器】鼠标完成某项操作时，会提示相应的快捷键。 activate-power-mode【装*神器】Atom上的神器，安装之后可以在 window -&gt; activate-power-mode中关闭震动以及开启彩色模式。 Markdown支持Markdown语法 CodeGlance之前用过Sublime编辑器同学，强烈推荐这个，这个插件可以让 webstorm 也具有右侧展示当前文件中代码的缩略图。 常见问题 webstorm可以像sublime一样多行选择，比如在sublime中全选一个单词然后使用cmd+d，就可以往下选择一样的单词，然后进入多行模式吗？ 逐个选中多个相同的词sublime：Ctrl + D (Ctrl + K可以跳过一个)webstrom：Ctrl + K ( Ctrl + Shift + K 可以回退一个) 同时选中所有相同的词sublime：Alt + F3webstrom：Ctrl + Shift + Alt + K 单击左键选择多行sublime：按住Ctrl然后单击左键webstrom：按住Alt然后单击左键 拖动选择多行sublime：按住Ctrl + Shift + 鼠标右键 拖动webstrom：按住Alt + 鼠标右键 拖动","categories":[{"name":"工具","slug":"工具","permalink":"http://www.91h5.cc/categories/工具/"}],"tags":[{"name":"Webstrorm","slug":"Webstrorm","permalink":"http://www.91h5.cc/tags/Webstrorm/"},{"name":"快捷键","slug":"快捷键","permalink":"http://www.91h5.cc/tags/快捷键/"},{"name":"IDE","slug":"IDE","permalink":"http://www.91h5.cc/tags/IDE/"}]},{"title":"站在人工智能风口的Python程序员","slug":"站在人工智能风口的Python程序员","date":"2017-08-25T08:12:19.000Z","updated":"2021-08-15T09:30:32.359Z","comments":true,"path":"archives/63096.html","link":"","permalink":"http://www.91h5.cc/archives/63096.html","excerpt":"","text":"2017年短短不到三个月的时间，国内AI获投项目已有36个，千万级别融资占据半数以上。 嗯，就是那么霸道。两会刚刚结束，“人工智能”首次被列入政府工作报告，随之而来的是人工智能板块领跑大盘涨势，无疑，这一切将刺激人工智能在多个领域的全面发展。 大量融资的风口企业，绝对会把钱拿到招揽人才。而现在最流行的人工智能技术栈就是 TensorFlow 和 PyTorch，使用它们就是一份 Python 编程开发工作。一时间，python程序员成了人才市场的“抢手货”，工资待遇也水涨船高了。口说无凭，我们去工作搜索引擎jobui.com找看。一看吓一跳，首先是待遇啊： 最高待遇不过万不出奇啊！这还只是广州的情况，估计在北上深三个城市里，两者的差距还要大得多。除了待遇，跑到风口行业写Python，分分钟就是人工智能科学家的光环上身啊，估计大家都要跑得比西方记者还快了。 乐了Python程序员，苦的就是公司是Python技术栈的传统IT业务的企业了。就别提一般的小企业，连豆瓣、知乎这样的都大受冲击了。豆瓣的洪强宁，也跑去创业做人工智能相关的应用了…… 没有人能够对抗趋势，风口企业这么有钱，能做的就只能是避开它们的锋芒。我觉得Python技术栈的企业应该考虑新的技术选型了。","categories":[{"name":"后端","slug":"后端","permalink":"http://www.91h5.cc/categories/后端/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.91h5.cc/tags/python/"}]},{"title":"永久免费翻樯大杀器(不限速)","slug":"永久免费翻樯大杀器(不限速)","date":"2017-08-24T08:12:19.000Z","updated":"2021-08-15T09:30:32.359Z","comments":false,"path":"archives/61443.html","link":"","permalink":"http://www.91h5.cc/archives/61443.html","excerpt":"","text":"网上免费翻墙的网站、软件、账号越来越少了，不是要天天签到就是不定时更换帐号密码，速度不理想，也不稳定。今天推荐GFW.Press。需要翻墙注册，无翻墙软件的可下载Lantern，用法不多说，自己动手丰衣足食。 现在已经大家都能够翻樯了.接下来就要使用免费服务了:1.登录gfw.press官网(这里需要翻樯)2.点击注册3.注册成功后点击登录,你将会看到节点信息 4.下载gfw.press软件5.安装完毕后双击打开,并安装gfw.press官网中提供的账号填入节点,端口以及密码.6.打开谷歌浏览器,搜索chrome网上应用店,打开并搜索插件switchomega,安装插件 (这里需要翻樯) 7.下载完毕后,你的谷歌浏览器右上角将多出一个小图标.单击选项按钮进入管理界面. 8.进入管理界面后,进行如下配置 新建情景模式 填入路由信息","categories":[{"name":"工具","slug":"工具","permalink":"http://www.91h5.cc/categories/工具/"}],"tags":[{"name":"gfw","slug":"gfw","permalink":"http://www.91h5.cc/tags/gfw/"}]},{"title":"JavaScript代码检查工具对比","slug":"JavaScript代码检查工具对比","date":"2017-04-03T07:51:30.000Z","updated":"2021-08-15T09:30:32.359Z","comments":true,"path":"archives/26064.html","link":"","permalink":"http://www.91h5.cc/archives/26064.html","excerpt":"","text":"JavaScript代码校验工具能够让你在写代码时避免一些低级的错误。尽管我有很多年的开发经验，我仍然会犯一些语法错误并且忘记处理我的错误。一个好的校验工具或者格式化工具，可以让我避免这些错误，以免浪费我的时间。一个好的校验工具还能确保一个项目保持一个固定的代码风格。 有很多关于JavaScript的校验工具，你怎样选择其中的某一个呢？让我们一起来看看它们有什么样的特性以及优缺点。接下来我要介绍四种常用的选择：JSLint，JSHint，JSCS和ESLint。 Overview这四个工具的基本用法都是类似的，它们定义了一套规则用来解析和报告js文件里面的问题。它们都可以通过npm来进行安装。可以通过命令行来调用它们，给命令行传递文件参数，也可以作为grunt这一类工具的插件被使用，或者可以集成到编辑器中。它们都支持使用注释作为配置。 以上就是它们所有的相似之处了，每一个工具都有优缺点，只是有些工具相比于其它工具更加有优势。 JSLintJSLint是这四种校验工具中最为古老的。Douglas Crockford（译注:《JavaScript 语言精粹》的作者）在2002年创造了它，它是强制使用的，为了保留它所认为的JavaScript这门语言的精华部分。如果你认同他的观点，对你而言，JSLint将会是一个好的工具。安装完成马上即可使用。 JSLint的缺点是它是不可以进行配置和扩展的。你不能禁用它的某些特性，并且缺乏文档。它的官网并没有什么用处，例如，它缺少如果将这个工具整合到你的编辑器的任何信息。 优点： 配置规则都已经定好了，安装即可使用（如果你同意这些强制的规则的话） 缺点： JSLint没有可配置文件，你无法对它的规则进行更改 配置规则的数量有限，有些规则无法禁用 不支持自定义规则 缺少文档 很难定位到哪条规则导致了错误 JSCSCJSCS和以上两个都是不同的，如果不给它一个配置文件或者使用一套预设的规则，它将什么也不做不了，不过你可以从别的网站下载配置文件，所以这并不是什么大问题，并且它有很多的预设规则，比如说jQuery的代码风格的预设规则以及Google的代码风格的预设规则。 它有超过90种不同的规则，并且你可以通过插件创造自定义规则。JSCS也支持自定义输出报告，这使得其更容易与需要其以特定格式输入的工具集成。 JSCS是一个代码风格检查器，这意味着它只捕获与代码格式相关的问题，而不包含潜在的错误。因此，它比其他工具的灵活性更低，但是如果您需要强制执行特定的编码风格，那么JSCS就可以做的很好。 优点： 支持自定义输出报告，可以使其更容易和其它工具进行集成 如果您遵循现有的可用编码风格之一，预设和现成的配置文件可以轻松设置 在报告中，有一个标志包含在规则名之中，所以很容易找出是哪条规则导致了错误 可以利用自定义的插件进行拓展 缺点： 只检测到代码风格的违规，不检测潜在的错误，比如说未使用的变量或者变量的全局污染等 四个工具中性能最差的，但是这并不是一个典型用途的问题 ESLintESLint是这四个工具中最新的，它被设计为易于拓展的，具有大量的自定义规则，并且很容易通过插件的形式来安装。它输出简洁的报告，但是默认包含规则的名称，因此你始终知道是那条规则导致了错误的信息。 ESLint的文档多少有些混乱，规则的列表容易查找，并且按逻辑进行分类，但配置说明在某些地方有点混乱。然而，它提供了如何对编辑器进行集成，插件和示例的链接。 优点： 灵活：任何规则都可以切换使用，并且有些规则有额外的配置可以使用 可拓展性好，并且有很多可用的插件 易于理解的输出报告 包含一些其它工具所没有的规则，使得ESLint更容易检测出代码中潜在的错误 对ES6的支持性最好，是唯一支持JSX的工具 支持自定义输出报告 缺点： 需要一些配置 性能差，但这并不是主要的障碍 推荐一个好的校验工具是捕捉问题非常重要的一步，但是它只能检测出它的规则许可范围之内的错误。对于更多简单明了的bug的捕捉，我建议使用单元测试，Code reviews也是也是不错的方式。","categories":[{"name":"前端","slug":"前端","permalink":"http://www.91h5.cc/categories/前端/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.91h5.cc/tags/JavaScript/"},{"name":"jsLint","slug":"jsLint","permalink":"http://www.91h5.cc/tags/jsLint/"}]}],"categories":[{"name":"工具","slug":"工具","permalink":"http://www.91h5.cc/categories/工具/"},{"name":"后端","slug":"后端","permalink":"http://www.91h5.cc/categories/后端/"},{"name":"前端","slug":"前端","permalink":"http://www.91h5.cc/categories/前端/"}],"tags":[{"name":"Webstrorm","slug":"Webstrorm","permalink":"http://www.91h5.cc/tags/Webstrorm/"},{"name":"快捷键","slug":"快捷键","permalink":"http://www.91h5.cc/tags/快捷键/"},{"name":"IDE","slug":"IDE","permalink":"http://www.91h5.cc/tags/IDE/"},{"name":"python","slug":"python","permalink":"http://www.91h5.cc/tags/python/"},{"name":"gfw","slug":"gfw","permalink":"http://www.91h5.cc/tags/gfw/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://www.91h5.cc/tags/JavaScript/"},{"name":"jsLint","slug":"jsLint","permalink":"http://www.91h5.cc/tags/jsLint/"}]}